#!/usr/bin/env zsh
#
# File: .zsh-aliases
# Description: zsh aliases
# Author: Pavle Batuta <pavle@batuta.xyz>, maximbaz

# Generic:

command -v curlie &>/dev/null       && alias curl='curlie'
command -v dfrs &>/dev/null 	    && alias df='dfrs'
command -v git &>/dev/null 		    && alias diff='git diff --no-index'
command -v trash_put &>/dev/null	&& alias rm='trash-put'
command -v bat &>/dev/null		    && alias c='bat' || alias c='cat'
command -v fd &>/dev/null		    && alias fd='fd --hidden --follow' || alias fd='find . -name'
command -v rg &>/dev/null		    && alias rg='rg --hidden --follow --smart-case 2>/dev/null' || alias rg='grep --color=auto --exclude-dir=.git -R'
command -v exa &>/dev/null  		&& alias ls='exa --group --git --group-directories-first' || alias ls='ls --color=auto --group-directories-first -h'
command -v exa &>/dev/null 		    && alias la='ll -a' || alias la='ll -A'
command -v exa &>/dev/null 		    && alias lk='ll -s=size' || alias lk='ll -r --sort=size'
command -v exa &>/dev/null 		    && alias lm='ll -s=modified' || alias lm='ll -r --sort=time'
command -v dog &>/dev/null          && alias d='dog' || alias d='dig +nocmd +multiline +noall +answer'

alias e="$EDITOR"
alias cp='cp -r --reflink=auto'
alias mkdir='mkdir -p'
alias hexdump='od -A x -t x1z -v'
alias http-serve='python -m http.server'
alias htpasswd='openssl passwd -apr1'
alias ip='ip -color -brief'
alias o='xdg-open'
alias rm!='\rm -rf'
alias rsync='rsync --verbose --archive --info=progress2 --human-readable --partial'
alias sudo='sudo -E '
alias s='sudo'
alias tree='tree -a -I .git --dirsfirst'
alias l='ls'
alias ll='ls -l'
alias utc='env TZ=UTC date'
alias yarn='yarn --use-yarnrc "$XDG_CONFIG_HOME/yarn/config"'

function md() { [[ $# == 1 ]] && mkdir -p -- "$1" && cd -- "$1" }
compdef _directories md

e64() { [[ $# == 1 ]] && base64 -w0 <<<"$1" || base64 -w0 }
d64() { [[ $# == 1 ]] && base64 --decode <<<"$1" || base64 --decode }

p() { ping "${1:-1.1.1.1}" }

x() { PAGER="less -+F" xplr | IFS= read -r dir && cd -- "${dir:-.}" }

alias toggle-inhibit-idle='waybar-inhibit-idle toggle'

## Docker-compose:

alias dc='docker-compose'
alias dcu='dc up -d'
alias dcd='dc down'
alias dcr='dcd; dcu'
alias dcp='dc pull'
alias dcl='dc logs -t -f --tail=1000'
alias dce='dc exec'
alias dcs='dc ps'

## Systemctl:

alias sys='systemctl'
alias sysu='systemctl --user'
alias status='sys status'
alias statusu='sysu status'
alias start='sys start'
alias startu='sysu start'
alias stop='sys stop'
alias stopu='sysu stop'
alias restart='sys restart'
alias restartu='sysu restart'
alias enable='sys enable'
alias enableu='sysu enable'
alias disable='sys disable'
alias disableu='sysu disable'
alias reload='sys daemon-reload'
alias reloadu='sysu daemon-reload'
alias timers='sys list-timers'
alias timersu='sysu list-timers'

## Git:

alias g='git'

alias ga='g add'
alias gaa='ga --all'
alias gap='ga -p'

alias gb='g branch'
alias gba='g branch --all'
alias gbd='g branch -D'
alias gbda='g branch --no-color --merged | command grep -vE "^(\*|\s*(main|master|develop|dev)\s*$)" | command xargs -n 1 g branch -d'
alias gbo='g branch --set-upstream-to=origin/$(g symbolic-ref --short HEAD) $(g symbolic-ref --short HEAD)'
alias gbu='g branch --set-upstream-to=upstream/$(g symbolic-ref --short HEAD) $(g symbolic-ref --short HEAD)'

alias gbsb='g bisect bad'
alias gbsg='g bisect good'
alias gbsr='g bisect reset'
alias gbss='g bisect start'

alias gc='g commit -v'
alias gc!='gc --amend'
alias gac='gaa && gc'
alias gac!='gaa && gc!'
alias gacm='gaa && gcm'
alias gcm='gc -m'
alias gcf='gc --fixup'
alias gcfh='gc --fixup HEAD'
alias gacf='gaa && gc --fixup'
alias gacfh='gaa && gc --fixup HEAD'

alias gco='g checkout'
alias gcom='gco main || gco master'
alias gcob='gco -b'
alias gcop='gco -p'

alias gcp='g cherry-pick'
alias gcpa='gcp --abort'
alias gcpc='gcp --continue'

alias gd='g diff'
alias gds='gd --cached'

alias gf='g fetch --tags'
alias gu='gf origin main:main'

alias gl='g pull --tags -f --rebase --autostash'

alias glog="g log --graph --pretty='%Cred%h%Creset%C(yellow)%d%Creset %s %Cgreen(%cr) %C(blue)<%an>%Creset' --abbrev-commit"
alias gloga="glog --all"
alias glogp='g log -p'

alias gm='g merge'
alias gma='gm --abort'

alias gp='g push -u'
alias gpf='gp --force-with-lease'
alias gpf!='gp --force'

alias gra='g remote add'
alias grr='g remote remove'
alias grv='g remote -v'

alias grba='g rebase --abort'
alias grbc='g rebase --continue'
alias grbi='g rebase -i'
alias grbm='g rebase -i main'
alias grbom='g rebase -i origin/main'

alias gr='g reset'
alias gr!='gr --hard'
alias grh='gr HEAD'
alias grh!='gr! HEAD'
alias garh!='gaa && gr! HEAD'

alias gs='g show --show-signature'
alias gst='g stash'
alias gstp='gst pop'
alias gstc='gst clear'

alias gss!='g status'
alias gss='gss! -sb'

alias gsa='g submodule add'
alias gsu='g submodule update --remote'
alias gsr='g submodule-remove'

gcl() {
    git clone --recursive "$@"
    cd -- "${${${@: -1}##*/}%*.git}"
}

grf() {
    upstream="$(git remote get-url upstream 2>/dev/null || git remote get-url origin)"
    if [[ $# == 1 ]]; then
        if [[ "$upstream" == https* ]]; then
            fork=$(echo "$upstream" | awk -v name="$1" -F/ '{ print $1 "/" $2 "/" $3 "/" name "/" $5 }')
        else
            fork=$(echo "$upstream" | awk -v name="$1" -F/ '{ print "https://github.com/" name "/" $2 }')
        fi

        git remote remove "$1" 2>/dev/null
        git remote add "$1" "$fork"
        git fetch "$1"
    else
        myfork=$(echo "$upstream" | awk -v name="$USER" -F/ '{ print "git@github.com:" name "/" $5 }')

        git remote remove upstream 2>/dev/null
        git remote remove origin 2>/dev/null

        git remote add upstream "$upstream"
        git remote add origin "$myfork"

        git fetch upstream
        git fetch origin

        git branch --set-upstream-to=upstream/main main
    fi
}

## pacman:

repo-local-remove() {
    repo-remove -s /var/cache/pacman/pax-local/pax-local.db.tar "$@"
}

pac() {
    sudo -E pacman "$@" || return 1

    is_removal=0
    while [[ "$1" == -* ]]; do
	# TODO: use switch
	[[ "$1" == "-h" ]] && return 0
	[[ "$1" == "--help" ]] && return 0
	[[ "$1" == "-V" ]] && return 0
	[[ "$1" == "--version" ]] && return 0
        [[ "$1" == "-R"* ]] && is_removal=1
        shift
    done
    if (( is_removal )); then
        echo "\nCleaning up AUR repo..."
        repo-remove -s /var/cache/pacman/pax-local/pax-local.db.tar "$@"
    fi

    echo "\nCleaning up repo cache..."
    sudo -E paccache -vr -c /var/cache/pacman/pkg -c /var/cache/pacman/pax-local
    sudo -E paccache -vruk0 -c /var/cache/pacman/pkg -c /var/cache/pacman/pax-local

    rehash
}

pacs() {
    [ $# -lt 1 ] && { >&2 echo "Error: no search term provided"; return 1; }
    sudo -E pacman -Sy
    tmp=$(mktemp -d)

    {
        aur search --table -n -k NumVotes $(basename -a "$@" | xargs)  | awk -F"\t" '{print "aur/" $1 "\n" $4}'
        pacman -Ss $(basename -a "$@" | xargs)
    } |
    while read -r pkg; do
        read -r desc
        name="${pkg%% *}"
        mkdir -p "$tmp/${name%/*}"
        echo "$pkg" >>$tmp/pkgs
        echo "$desc" >$tmp/$name
    done
    [ -s $tmp/pkgs ] || { >&2 echo "No packages found"; rm -rf "$tmp"; return 2; }

    aur_pkgs=()
    repo_pkgs=()
    cat $tmp/pkgs | fzf --tac --preview-window=wrap --preview="cat $tmp/{1}; echo; echo; pacman -Si \$(basename {1}) 2>/dev/null; true" |
    while read -r pkg; do
        title="${pkg%% *}"
        if [ "${title%/*}" = "aur" ]; then
            aur_pkgs+=("${title#*/}")
        else
            repo_pkgs+=("${title#*/}")
        fi
    done
    rm -rf "$tmp"

    if (( ${#aur_pkgs[@]} )); then
        aur sync "${aur_pkgs[@]}"
        post_aur
    fi
    SNAP_PAC_SKIP=true pac -Sy "${aur_pkgs[@]}" "${repo_pkgs[@]}"
}

post_aur() {
    find ~/.cache/aurutils/sync -name .git -execdir git clean -fx \; >/dev/null
    find /var/cache/pacman/pax-local -group root -delete >/dev/null
}

pacu() {
    aur sync -u
    post_aur
    pac -Syu
}

aurs() {
    aur sync "$@"
    sudo -E pacman -Sy
    post_aur
}
alias aurs!='aurs --nover-argv -f'
